# ℹ️ Contents of this file were (almost entirely) autogenerated by the command
# `sqlacodegen --generator sqlmodels postgresql://localhost:5432/postgres`

from typing import List, Optional
from datetime import datetime

from sqlmodel import Field, SQLModel, Relationship
from sqlalchemy import (
    CHAR,
    Enum,
    Text,
    String,
    Boolean,
    Integer,
    DateTime,
    BigInteger,
    SmallInteger,
    UniqueConstraint,
    ForeignKeyConstraint,
    PrimaryKeyConstraint,
)
from sqlalchemy.schema import Column
from sqlalchemy.dialects.postgresql import JSONB


class Title(SQLModel, table=True):
    __tablename__ = "titles"
    __table_args__ = (
        PrimaryKeyConstraint("id", name="titles_pkey"),
        UniqueConstraint("netflix_id", name="netflix_id"),
    )

    id: int = Field(default=None, sa_column=Column("id", Integer, primary_key=True))
    netflix_id: int = Field(default=None, sa_column=Column("netflix_id", BigInteger))
    title: Optional[str] = Field(default=None, sa_column=Column("title", String(256)))
    content_type: Optional[str] = Field(
        default=None,
        sa_column=Column("content_type", Enum("movie", "series", name="content_type")),
    )
    release_year: Optional[int] = Field(
        default=None, sa_column=Column("release_year", Integer)
    )
    runtime: Optional[int] = Field(default=None, sa_column=Column("runtime", Integer))
    meta_data: Optional[dict] = Field(default=None, sa_column=Column("metadata", JSONB))

    availability: List["Availability"] = Relationship(back_populates="title")
    ratings: List["Rating"] = Relationship(back_populates="title")


class Availability(SQLModel, table=True):
    __table_args__ = (
        ForeignKeyConstraint(
            ["netflix_id"], ["titles.netflix_id"], name="availability_netflix_id_fkey"
        ),
        PrimaryKeyConstraint("id", name="availability_pkey"),
        UniqueConstraint("country", "netflix_id", name="unique_country_and_netflix_id"),
    )

    id: Optional[int] = Field(
        default=None, sa_column=Column("id", Integer, primary_key=True)
    )
    netflix_id: Optional[int] = Field(
        default=None, sa_column=Column("netflix_id", BigInteger)
    )
    redirected_netflix_id: Optional[int] = Field(
        default=None, sa_column=Column("redirected_netflix_id", BigInteger)
    )
    country: Optional[str] = Field(default=None, sa_column=Column("country", CHAR(2)))
    titlepage_reachable: Optional[bool] = Field(
        default=None, sa_column=Column("titlepage_reachable", Boolean)
    )
    available: Optional[bool] = Field(
        default=None, sa_column=Column("available", Boolean)
    )
    checked_at: Optional[datetime] = Field(
        default=None, sa_column=Column("checked_at", DateTime)
    )

    title: Title = Relationship(back_populates="availability")


class Rating(SQLModel, table=True):
    __tablename__ = "ratings"
    __table_args__ = (
        ForeignKeyConstraint(
            ["netflix_id"], ["titles.netflix_id"], name="ratings_netflix_id_fkey"
        ),
        PrimaryKeyConstraint("id", name="ratings_pkey"),
        UniqueConstraint("vendor", "netflix_id", name="unique_vendor_and_netflix_id"),
    )

    id: Optional[int] = Field(
        default=None, sa_column=Column("id", Integer, primary_key=True)
    )
    netflix_id: Optional[int] = Field(
        default=None, sa_column=Column("netflix_id", BigInteger)
    )
    vendor: Optional[str] = Field(default=None, sa_column=Column("vendor", String(32)))
    url: Optional[str] = Field(default=None, sa_column=Column("url", Text))
    rating: Optional[int] = Field(
        default=None, sa_column=Column("rating", SmallInteger)
    )
    ratings_count: Optional[int] = Field(
        default=None, sa_column=Column("ratings_count", Integer)
    )
    checked_at: Optional[datetime] = Field(
        default=None, sa_column=Column("checked_at", DateTime)
    )

    title: Title = Relationship(back_populates="ratings")
